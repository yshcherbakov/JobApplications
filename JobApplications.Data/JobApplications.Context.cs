//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JobApplications.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JobApplicationsEntities : DbContext
    {
        public JobApplicationsEntities()
            : base("name=JobApplicationsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
    
        public virtual int spCreateApplication(string applicantName, Nullable<int> createdByUser, Nullable<System.DateTime> createdDateTime)
        {
            var applicantNameParameter = applicantName != null ?
                new ObjectParameter("ApplicantName", applicantName) :
                new ObjectParameter("ApplicantName", typeof(string));
    
            var createdByUserParameter = createdByUser.HasValue ?
                new ObjectParameter("CreatedByUser", createdByUser) :
                new ObjectParameter("CreatedByUser", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateApplication", applicantNameParameter, createdByUserParameter, createdDateTimeParameter);
        }
    
        public virtual ObjectResult<spGetAcceptedApplications_Result> spGetAcceptedApplications(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAcceptedApplications_Result>("spGetAcceptedApplications", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetApplicationNextQuestion_Result> spGetApplicationNextQuestion(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationNextQuestion_Result>("spGetApplicationNextQuestion", applicationIdParameter);
        }
    
        public virtual ObjectResult<spGetApplicationQualification_Result> spGetApplicationQualification(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationQualification_Result>("spGetApplicationQualification", applicationIDParameter);
        }
    
        public virtual int spSubmitApplication(Nullable<int> applicationID, Nullable<System.DateTime> submittedDateTime)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var submittedDateTimeParameter = submittedDateTime.HasValue ?
                new ObjectParameter("SubmittedDateTime", submittedDateTime) :
                new ObjectParameter("SubmittedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubmitApplication", applicationIDParameter, submittedDateTimeParameter);
        }
    
        public virtual int spSubmitApplicationAnswer(Nullable<int> applicationID, Nullable<int> questionID, Nullable<int> answerID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerIDParameter = answerID.HasValue ?
                new ObjectParameter("AnswerID", answerID) :
                new ObjectParameter("AnswerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubmitApplicationAnswer", applicationIDParameter, questionIDParameter, answerIDParameter);
        }
    
        public virtual int spDeleteApplication(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteApplication", applicationIdParameter);
        }
    }
}
